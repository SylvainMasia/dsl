/*
 * generated by Xtext 2.14.0
 */
package polytech.dsl.spaceteam.spaml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SpamlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInitialStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInitialStateStateCrossReference_3_0 = (CrossReference)cInitialStateAssignment_3.eContents().get(0);
		private final RuleCall cInitialStateStateEStringParserRuleCall_3_0_1 = (RuleCall)cInitialStateStateCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cPluggedElementsKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cPluggedElementsKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Assignment cPluggedElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPluggedElementsPluggedElementParserRuleCall_6_0 = (RuleCall)cPluggedElementsAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cStatesKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cStatesKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Assignment cStatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatesStateParserRuleCall_8_0 = (RuleCall)cStatesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Program:
		//	'Program' name=EString 'initialState' initialState=[State|EString]
		//	'{' ('pluggedElements' | 'pluggedElements:') pluggedElements+=PluggedElement+ ('states' | 'states:') states+=State+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Program' name=EString 'initialState' initialState=[State|EString] '{' ('pluggedElements' | 'pluggedElements:')
		//pluggedElements+=PluggedElement+ ('states' | 'states:') states+=State+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'initialState'
		public Keyword getInitialStateKeyword_2() { return cInitialStateKeyword_2; }
		
		//initialState=[State|EString]
		public Assignment getInitialStateAssignment_3() { return cInitialStateAssignment_3; }
		
		//[State|EString]
		public CrossReference getInitialStateStateCrossReference_3_0() { return cInitialStateStateCrossReference_3_0; }
		
		//EString
		public RuleCall getInitialStateStateEStringParserRuleCall_3_0_1() { return cInitialStateStateEStringParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'pluggedElements' | 'pluggedElements:'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'pluggedElements'
		public Keyword getPluggedElementsKeyword_5_0() { return cPluggedElementsKeyword_5_0; }
		
		//'pluggedElements:'
		public Keyword getPluggedElementsKeyword_5_1() { return cPluggedElementsKeyword_5_1; }
		
		//pluggedElements+=PluggedElement+
		public Assignment getPluggedElementsAssignment_6() { return cPluggedElementsAssignment_6; }
		
		//PluggedElement
		public RuleCall getPluggedElementsPluggedElementParserRuleCall_6_0() { return cPluggedElementsPluggedElementParserRuleCall_6_0; }
		
		//'states' | 'states:'
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'states'
		public Keyword getStatesKeyword_7_0() { return cStatesKeyword_7_0; }
		
		//'states:'
		public Keyword getStatesKeyword_7_1() { return cStatesKeyword_7_1; }
		
		//states+=State+
		public Assignment getStatesAssignment_8() { return cStatesAssignment_8; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_8_0() { return cStatesStateParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class PluggedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.PluggedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSensorParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnPinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPinEIntParserRuleCall_3_0 = (RuleCall)cPinAssignment_3.eContents().get(0);
		
		//PluggedElement:
		//	(Actuator | Sensor) name=EString 'onPin'? pin=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//(Actuator | Sensor) name=EString 'onPin'? pin=EInt
		public Group getGroup() { return cGroup; }
		
		//Actuator | Sensor
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_0_0() { return cActuatorParserRuleCall_0_0; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0_1() { return cSensorParserRuleCall_0_1; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'onPin'?
		public Keyword getOnPinKeyword_2() { return cOnPinKeyword_2; }
		
		//pin=EInt
		public Assignment getPinAssignment_3() { return cPinAssignment_3; }
		
		//EInt
		public RuleCall getPinEIntParserRuleCall_3_0() { return cPinEIntParserRuleCall_3_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Assignment cTransitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionsTransitionParserRuleCall_3_0 = (RuleCall)cTransitionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//State:
		//	name=EString '{'
		//	actions+=Action+
		//	transitions+=Transition+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString '{' actions+=Action+ transitions+=Transition+ '}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }
		
		//transitions+=Transition+
		public Assignment getTransitionsAssignment_3() { return cTransitionsAssignment_3; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_3_0() { return cTransitionsTransitionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorDigitalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSensorAnalogParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Sensor:
		//	SensorDigital | SensorAnalog;
		@Override public ParserRule getRule() { return rule; }
		
		//SensorDigital | SensorAnalog
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SensorDigital
		public RuleCall getSensorDigitalParserRuleCall_0() { return cSensorDigitalParserRuleCall_0; }
		
		//SensorAnalog
		public RuleCall getSensorAnalogParserRuleCall_1() { return cSensorAnalogParserRuleCall_1; }
	}
	public class SensorDigitalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.SensorDigital");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorDigitalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorDigitalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SensorDigital:
		//	{SensorDigital}
		//	'SensorDigital';
		@Override public ParserRule getRule() { return rule; }
		
		//{SensorDigital} 'SensorDigital'
		public Group getGroup() { return cGroup; }
		
		//{SensorDigital}
		public Action getSensorDigitalAction_0() { return cSensorDigitalAction_0; }
		
		//'SensorDigital'
		public Keyword getSensorDigitalKeyword_1() { return cSensorDigitalKeyword_1; }
	}
	public class SensorAnalogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.SensorAnalog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAnalogAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorAnalogKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SensorAnalog:
		//	{SensorAnalog}
		//	'SensorAnalog';
		@Override public ParserRule getRule() { return rule; }
		
		//{SensorAnalog} 'SensorAnalog'
		public Group getGroup() { return cGroup; }
		
		//{SensorAnalog}
		public Action getSensorAnalogAction_0() { return cSensorAnalogAction_0; }
		
		//'SensorAnalog'
		public Keyword getSensorAnalogKeyword_1() { return cSensorAnalogKeyword_1; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActuatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActuatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Actuator:
		//	{Actuator}
		//	'Actuator';
		@Override public ParserRule getRule() { return rule; }
		
		//{Actuator} 'Actuator'
		public Group getGroup() { return cGroup; }
		
		//{Actuator}
		public Action getActuatorAction_0() { return cActuatorAction_0; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_1() { return cActuatorKeyword_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActuatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActuatorActuatorCrossReference_0_0 = (CrossReference)cActuatorAssignment_0.eContents().get(0);
		private final RuleCall cActuatorActuatorEStringParserRuleCall_0_0_1 = (RuleCall)cActuatorActuatorCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSetToKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSIGNALEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Action:
		//	actuator=[Actuator|EString] ('=' | 'setTo') value=SIGNAL;
		@Override public ParserRule getRule() { return rule; }
		
		//actuator=[Actuator|EString] ('=' | 'setTo') value=SIGNAL
		public Group getGroup() { return cGroup; }
		
		//actuator=[Actuator|EString]
		public Assignment getActuatorAssignment_0() { return cActuatorAssignment_0; }
		
		//[Actuator|EString]
		public CrossReference getActuatorActuatorCrossReference_0_0() { return cActuatorActuatorCrossReference_0_0; }
		
		//EString
		public RuleCall getActuatorActuatorEStringParserRuleCall_0_0_1() { return cActuatorActuatorEStringParserRuleCall_0_0_1; }
		
		//'=' | 'setTo'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//'setTo'
		public Keyword getSetToKeyword_1_1() { return cSetToKeyword_1_1; }
		
		//value=SIGNAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//SIGNAL
		public RuleCall getValueSIGNALEnumRuleCall_2_0() { return cValueSIGNALEnumRuleCall_2_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cWhenKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Assignment cConditionsAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cConditionsConditionParserRuleCall_0_0_1_0_0 = (RuleCall)cConditionsAssignment_0_0_1_0.eContents().get(0);
		private final Group cGroup_0_0_1_1 = (Group)cGroup_0_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_0_1_1_0 = (Keyword)cGroup_0_0_1_1.eContents().get(0);
		private final Assignment cConditionsAssignment_0_0_1_1_1 = (Assignment)cGroup_0_0_1_1.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_0_0_1_1_1_0 = (RuleCall)cConditionsAssignment_0_0_1_1_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cOperationAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cOperationOPERATIONEnumRuleCall_0_1_0_0 = (RuleCall)cOperationAssignment_0_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Assignment cConditionsAssignment_0_1_2_0 = (Assignment)cGroup_0_1_2.eContents().get(0);
		private final RuleCall cConditionsConditionParserRuleCall_0_1_2_0_0 = (RuleCall)cConditionsAssignment_0_1_2_0.eContents().get(0);
		private final Group cGroup_0_1_2_1 = (Group)cGroup_0_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_2_1_0 = (Keyword)cGroup_0_1_2_1.eContents().get(0);
		private final Assignment cConditionsAssignment_0_1_2_1_1 = (Assignment)cGroup_0_1_2_1.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_0_1_2_1_1_0 = (RuleCall)cConditionsAssignment_0_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cThenKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNextStateCrossReference_2_0 = (CrossReference)cNextAssignment_2.eContents().get(0);
		private final RuleCall cNextStateEStringParserRuleCall_2_0_1 = (RuleCall)cNextStateCrossReference_2_0.eContents().get(1);
		
		//Transition:
		//	('when'? (conditions+=Condition (',' conditions+=Condition)*) | operation=OPERATION '(' (conditions+=Condition (','
		//	conditions+=Condition)*) ')') ('->' | 'then') next=[State|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//('when'? (conditions+=Condition (',' conditions+=Condition)*) | operation=OPERATION '(' (conditions+=Condition (','
		//conditions+=Condition)*) ')') ('->' | 'then') next=[State|EString]
		public Group getGroup() { return cGroup; }
		
		//'when'? (conditions+=Condition (',' conditions+=Condition)*) | operation=OPERATION '(' (conditions+=Condition (','
		//conditions+=Condition)*) ')'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'when'? (conditions+=Condition (',' conditions+=Condition)*)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'when'?
		public Keyword getWhenKeyword_0_0_0() { return cWhenKeyword_0_0_0; }
		
		//conditions+=Condition (',' conditions+=Condition)*
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_0_0_1_0() { return cConditionsAssignment_0_0_1_0; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_0_0_1_0_0() { return cConditionsConditionParserRuleCall_0_0_1_0_0; }
		
		//(',' conditions+=Condition)*
		public Group getGroup_0_0_1_1() { return cGroup_0_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_0_0_1_1_0() { return cCommaKeyword_0_0_1_1_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_0_0_1_1_1() { return cConditionsAssignment_0_0_1_1_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_0_0_1_1_1_0() { return cConditionsConditionParserRuleCall_0_0_1_1_1_0; }
		
		//operation=OPERATION '(' (conditions+=Condition (',' conditions+=Condition)*) ')'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//operation=OPERATION
		public Assignment getOperationAssignment_0_1_0() { return cOperationAssignment_0_1_0; }
		
		//OPERATION
		public RuleCall getOperationOPERATIONEnumRuleCall_0_1_0_0() { return cOperationOPERATIONEnumRuleCall_0_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_1() { return cLeftParenthesisKeyword_0_1_1; }
		
		//conditions+=Condition (',' conditions+=Condition)*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_0_1_2_0() { return cConditionsAssignment_0_1_2_0; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_0_1_2_0_0() { return cConditionsConditionParserRuleCall_0_1_2_0_0; }
		
		//(',' conditions+=Condition)*
		public Group getGroup_0_1_2_1() { return cGroup_0_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_2_1_0() { return cCommaKeyword_0_1_2_1_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_0_1_2_1_1() { return cConditionsAssignment_0_1_2_1_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_0_1_2_1_1_0() { return cConditionsConditionParserRuleCall_0_1_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }
		
		//'->' | 'then'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_1() { return cThenKeyword_1_1; }
		
		//next=[State|EString]
		public Assignment getNextAssignment_2() { return cNextAssignment_2; }
		
		//[State|EString]
		public CrossReference getNextStateCrossReference_2_0() { return cNextStateCrossReference_2_0; }
		
		//EString
		public RuleCall getNextStateEStringParserRuleCall_2_0_1() { return cNextStateEStringParserRuleCall_2_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTemporalConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	TemporalCondition | LogicalCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalCondition | LogicalCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TemporalCondition
		public RuleCall getTemporalConditionParserRuleCall_0() { return cTemporalConditionParserRuleCall_0; }
		
		//LogicalCondition
		public RuleCall getLogicalConditionParserRuleCall_1() { return cLogicalConditionParserRuleCall_1; }
	}
	public class TemporalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.TemporalCondition");
		private final Assignment cDelayAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDelayEIntParserRuleCall_0 = (RuleCall)cDelayAssignment.eContents().get(0);
		
		//TemporalCondition:
		//	delay=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//delay=EInt
		public Assignment getDelayAssignment() { return cDelayAssignment; }
		
		//EInt
		public RuleCall getDelayEIntParserRuleCall_0() { return cDelayEIntParserRuleCall_0; }
	}
	public class LogicalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.LogicalCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSensorSensorCrossReference_0_0 = (CrossReference)cSensorAssignment_0.eContents().get(0);
		private final RuleCall cSensorSensorIDTerminalRuleCall_0_0_1 = (RuleCall)cSensorSensorCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cIsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSIGNALEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LogicalCondition:
		//	sensor=[Sensor] ('=' | 'is') value=SIGNAL;
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[Sensor] ('=' | 'is') value=SIGNAL
		public Group getGroup() { return cGroup; }
		
		//sensor=[Sensor]
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//[Sensor]
		public CrossReference getSensorSensorCrossReference_0_0() { return cSensorSensorCrossReference_0_0; }
		
		//ID
		public RuleCall getSensorSensorIDTerminalRuleCall_0_0_1() { return cSensorSensorIDTerminalRuleCall_0_0_1; }
		
		//'=' | 'is'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_1() { return cIsKeyword_1_1; }
		
		//value=SIGNAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//SIGNAL
		public RuleCall getValueSIGNALEnumRuleCall_2_0() { return cValueSIGNALEnumRuleCall_2_0; }
	}
	
	public class SIGNALElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.SIGNAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLOWLOWKeyword_0_0 = (Keyword)cLOWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHIGHHIGHKeyword_1_0 = (Keyword)cHIGHEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SIGNAL:
		//	LOW | HIGH;
		public EnumRule getRule() { return rule; }
		
		//LOW | HIGH
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LOW
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_0() { return cLOWEnumLiteralDeclaration_0; }
		
		//'LOW'
		public Keyword getLOWLOWKeyword_0_0() { return cLOWLOWKeyword_0_0; }
		
		//HIGH
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_1() { return cHIGHEnumLiteralDeclaration_1; }
		
		//'HIGH'
		public Keyword getHIGHHIGHKeyword_1_0() { return cHIGHHIGHKeyword_1_0; }
	}
	public class OPERATIONElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "polytech.dsl.spaceteam.spaml.Spaml.OPERATION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OPERATION:
		//	AND | OR;
		public EnumRule getRule() { return rule; }
		
		//AND | OR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'OR'
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final PluggedElementElements pPluggedElement;
	private final EStringElements pEString;
	private final StateElements pState;
	private final EIntElements pEInt;
	private final SensorElements pSensor;
	private final SensorDigitalElements pSensorDigital;
	private final SensorAnalogElements pSensorAnalog;
	private final ActuatorElements pActuator;
	private final ActionElements pAction;
	private final TransitionElements pTransition;
	private final ConditionElements pCondition;
	private final TemporalConditionElements pTemporalCondition;
	private final LogicalConditionElements pLogicalCondition;
	private final SIGNALElements eSIGNAL;
	private final OPERATIONElements eOPERATION;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpamlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pPluggedElement = new PluggedElementElements();
		this.pEString = new EStringElements();
		this.pState = new StateElements();
		this.pEInt = new EIntElements();
		this.pSensor = new SensorElements();
		this.pSensorDigital = new SensorDigitalElements();
		this.pSensorAnalog = new SensorAnalogElements();
		this.pActuator = new ActuatorElements();
		this.pAction = new ActionElements();
		this.pTransition = new TransitionElements();
		this.pCondition = new ConditionElements();
		this.pTemporalCondition = new TemporalConditionElements();
		this.pLogicalCondition = new LogicalConditionElements();
		this.eSIGNAL = new SIGNALElements();
		this.eOPERATION = new OPERATIONElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("polytech.dsl.spaceteam.spaml.Spaml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	'Program' name=EString 'initialState' initialState=[State|EString]
	//	'{' ('pluggedElements' | 'pluggedElements:') pluggedElements+=PluggedElement+ ('states' | 'states:') states+=State+
	//	'}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//PluggedElement:
	//	(Actuator | Sensor) name=EString 'onPin'? pin=EInt;
	public PluggedElementElements getPluggedElementAccess() {
		return pPluggedElement;
	}
	
	public ParserRule getPluggedElementRule() {
		return getPluggedElementAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//State:
	//	name=EString '{'
	//	actions+=Action+
	//	transitions+=Transition+
	//	'}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Sensor:
	//	SensorDigital | SensorAnalog;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//SensorDigital:
	//	{SensorDigital}
	//	'SensorDigital';
	public SensorDigitalElements getSensorDigitalAccess() {
		return pSensorDigital;
	}
	
	public ParserRule getSensorDigitalRule() {
		return getSensorDigitalAccess().getRule();
	}
	
	//SensorAnalog:
	//	{SensorAnalog}
	//	'SensorAnalog';
	public SensorAnalogElements getSensorAnalogAccess() {
		return pSensorAnalog;
	}
	
	public ParserRule getSensorAnalogRule() {
		return getSensorAnalogAccess().getRule();
	}
	
	//Actuator:
	//	{Actuator}
	//	'Actuator';
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Action:
	//	actuator=[Actuator|EString] ('=' | 'setTo') value=SIGNAL;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Transition:
	//	('when'? (conditions+=Condition (',' conditions+=Condition)*) | operation=OPERATION '(' (conditions+=Condition (','
	//	conditions+=Condition)*) ')') ('->' | 'then') next=[State|EString];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Condition:
	//	TemporalCondition | LogicalCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//TemporalCondition:
	//	delay=EInt;
	public TemporalConditionElements getTemporalConditionAccess() {
		return pTemporalCondition;
	}
	
	public ParserRule getTemporalConditionRule() {
		return getTemporalConditionAccess().getRule();
	}
	
	//LogicalCondition:
	//	sensor=[Sensor] ('=' | 'is') value=SIGNAL;
	public LogicalConditionElements getLogicalConditionAccess() {
		return pLogicalCondition;
	}
	
	public ParserRule getLogicalConditionRule() {
		return getLogicalConditionAccess().getRule();
	}
	
	//enum SIGNAL:
	//	LOW | HIGH;
	public SIGNALElements getSIGNALAccess() {
		return eSIGNAL;
	}
	
	public EnumRule getSIGNALRule() {
		return getSIGNALAccess().getRule();
	}
	
	//enum OPERATION:
	//	AND | OR;
	public OPERATIONElements getOPERATIONAccess() {
		return eOPERATION;
	}
	
	public EnumRule getOPERATIONRule() {
		return getOPERATIONAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
