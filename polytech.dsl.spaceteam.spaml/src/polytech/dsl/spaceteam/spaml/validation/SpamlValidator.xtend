/*
 * generated by Xtext 2.14.0
 */
package polytech.dsl.spaceteam.spaml.validation

import arduinoML.PluggedElement
import org.eclipse.xtext.validation.Check
import java.util.HashSet
import arduinoML.Program
import arduinoML.ArduinoMLPackage

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SpamlValidator extends AbstractSpamlValidator {
	
	public static val INVALID_PIN = 'invalidPin'

	@Check
	def checkPluggedElementPinValid(PluggedElement pluggedElement) {
		if (pluggedElement.pin < 0 || pluggedElement.pin > 13) {
			//System.err.println("OH NO, THERE IS AN ERROR THERE ======> pin should be 0 => pin <= 13 <======");
			error('Pin should be 0 => pin <= 13', 
					ArduinoMLPackage.Literals.PLUGGED_ELEMENT__PIN,
					0)
			return;
		}
	}
	
	@Check
	def checkPluggedElementPinNotDouble(Program program) {
		val pinsUsed = new HashSet<Integer>();
		for (var i = 0; i < program.pluggedElements.size; i++) {
			if (pinsUsed.contains(program.pluggedElements.get(i).pin)) {
				error('Pin ' + program.pluggedElements.get(i).pin + ' is already used', 
					ArduinoMLPackage.Literals.PROGRAM__PLUGGED_ELEMENTS,
					i)
			} else {
				pinsUsed.add(program.pluggedElements.get(i).pin);
			}
		}
	}
	
}
