/**
 * generated by Xtext 2.14.0
 */
package polytech.dsl.spaceteam.spaml.generator;

import arduinoML.Actuator;
import arduinoML.LogicalCondition;
import arduinoML.OPERATION;
import arduinoML.PluggedElement;
import arduinoML.Program;
import arduinoML.SIGNAL;
import arduinoML.Sensor;
import arduinoML.SensorAnalog;
import arduinoML.SensorDigital;
import arduinoML.TemporalCondition;
import com.google.common.collect.Iterables;
import io.github.mosser.arduinoml.kernel.App;
import io.github.mosser.arduinoml.kernel.behavioral.Action;
import io.github.mosser.arduinoml.kernel.behavioral.Condition;
import io.github.mosser.arduinoml.kernel.behavioral.State;
import io.github.mosser.arduinoml.kernel.behavioral.Transition;
import io.github.mosser.arduinoml.kernel.generator.ToWiring;
import io.github.mosser.arduinoml.kernel.structural.Brick;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SpamlGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
    for (final Program program : _filter) {
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(program);
      String _plus = (_fullyQualifiedName + ".ino");
      fsa.generateFile(_plus, 
        this.compile(program));
    }
  }
  
  private String compile(final Program program) {
    final App app = new App();
    app.setBricks(this.constructPluggedElements(program));
    app.setInitial(this.constructInitialState(program));
    app.setStates(this.constructStates(program));
    final ToWiring toWiring = new ToWiring();
    toWiring.visit(app);
    return toWiring.getResult().toString();
  }
  
  private List<Brick> constructPluggedElements(final Program program) {
    final ArrayList<Brick> bricks = new ArrayList<Brick>();
    EList<PluggedElement> _pluggedElements = program.getPluggedElements();
    for (final PluggedElement pe : _pluggedElements) {
      bricks.add(this.convertSpamlBrickToMosserBrick(pe));
    }
    return bricks;
  }
  
  private Brick convertSpamlBrickToMosserBrick(final PluggedElement pe) {
    if ((pe instanceof Sensor)) {
      return this.convertSpamlSensorToMosser(((Sensor)pe));
    } else {
      if ((pe instanceof Actuator)) {
        return this.convertSpamlActuatorToMosser(((Actuator)pe));
      }
    }
    return null;
  }
  
  private io.github.mosser.arduinoml.kernel.structural.Sensor convertSpamlSensorToMosser(final Sensor pe) {
    if ((pe instanceof SensorAnalog)) {
      io.github.mosser.arduinoml.kernel.structural.SensorAnalog sensor = new io.github.mosser.arduinoml.kernel.structural.SensorAnalog();
      sensor.setName(((SensorAnalog)pe).getName());
      sensor.setPin(((SensorAnalog)pe).getPin());
      return sensor;
    } else {
      if ((pe instanceof SensorDigital)) {
        io.github.mosser.arduinoml.kernel.structural.SensorDigital sensor_1 = new io.github.mosser.arduinoml.kernel.structural.SensorDigital();
        sensor_1.setName(((SensorDigital)pe).getName());
        sensor_1.setPin(((SensorDigital)pe).getPin());
        return sensor_1;
      }
    }
    return null;
  }
  
  private io.github.mosser.arduinoml.kernel.structural.Actuator convertSpamlActuatorToMosser(final Actuator pe) {
    final io.github.mosser.arduinoml.kernel.structural.Actuator actuator = new io.github.mosser.arduinoml.kernel.structural.Actuator();
    actuator.setName(pe.getName());
    actuator.setPin(pe.getPin());
    return actuator;
  }
  
  private State constructInitialState(final Program program) {
    final State initialState = new State();
    initialState.setName(program.getInitialState().getName());
    initialState.setTransitions(this.getTransitionsFromState(program.getInitialState()));
    initialState.setActions(this.getActionsFromState(program.getInitialState()));
    return initialState;
  }
  
  private Condition convertConditionToMosser(final arduinoML.Condition condition) {
    if ((condition instanceof LogicalCondition)) {
      final io.github.mosser.arduinoml.kernel.behavioral.LogicalCondition mosserCondition = new io.github.mosser.arduinoml.kernel.behavioral.LogicalCondition();
      SIGNAL _value = ((LogicalCondition)condition).getValue();
      boolean _tripleEquals = (_value == SIGNAL.HIGH);
      if (_tripleEquals) {
        mosserCondition.setValue(io.github.mosser.arduinoml.kernel.structural.SIGNAL.HIGH);
      } else {
        mosserCondition.setValue(io.github.mosser.arduinoml.kernel.structural.SIGNAL.LOW);
      }
      mosserCondition.setSensor(this.convertSpamlSensorToMosser(((LogicalCondition)condition).getSensor()));
      return mosserCondition;
    } else {
      if ((condition instanceof TemporalCondition)) {
        final io.github.mosser.arduinoml.kernel.behavioral.TemporalCondition mosserCondition_1 = new io.github.mosser.arduinoml.kernel.behavioral.TemporalCondition();
        mosserCondition_1.setDelay(((TemporalCondition)condition).getDelay());
        return mosserCondition_1;
      }
    }
    return null;
  }
  
  private List<Transition> getTransitionsFromState(final arduinoML.State state) {
    final ArrayList<Transition> transitions = new ArrayList<Transition>();
    EList<arduinoML.Transition> _transitions = state.getTransitions();
    for (final arduinoML.Transition t : _transitions) {
      {
        final Transition transition = new Transition();
        final State nextState = new State();
        nextState.setName(t.getNext().getName());
        transition.setNext(nextState);
        OPERATION _operation = t.getOperation();
        boolean _tripleEquals = (_operation == OPERATION.AND);
        if (_tripleEquals) {
          transition.setOperation(io.github.mosser.arduinoml.kernel.structural.OPERATION.AND);
        } else {
          transition.setOperation(io.github.mosser.arduinoml.kernel.structural.OPERATION.OR);
        }
        final ArrayList<Condition> conditions = new ArrayList<Condition>();
        EList<arduinoML.Condition> _conditions = t.getConditions();
        for (final arduinoML.Condition c : _conditions) {
          conditions.add(this.convertConditionToMosser(c));
        }
        transition.setConditions(conditions);
        transitions.add(transition);
      }
    }
    return transitions;
  }
  
  private List<Action> getActionsFromState(final arduinoML.State state) {
    final ArrayList<Action> actions = new ArrayList<Action>();
    EList<arduinoML.Action> _actions = state.getActions();
    for (final arduinoML.Action a : _actions) {
      {
        final Action action = new Action();
        action.setActuator(this.convertSpamlActuatorToMosser(a.getActuator()));
        SIGNAL _value = a.getValue();
        boolean _tripleEquals = (_value == SIGNAL.HIGH);
        if (_tripleEquals) {
          action.setValue(io.github.mosser.arduinoml.kernel.structural.SIGNAL.HIGH);
        } else {
          action.setValue(io.github.mosser.arduinoml.kernel.structural.SIGNAL.LOW);
        }
        actions.add(action);
      }
    }
    return actions;
  }
  
  private List<State> constructStates(final Program program) {
    final ArrayList<State> states = new ArrayList<State>();
    EList<arduinoML.State> _states = program.getStates();
    for (final arduinoML.State s : _states) {
      {
        final State state = new State();
        state.setName(s.getName());
        state.setTransitions(this.getTransitionsFromState(s));
        state.setActions(this.getActionsFromState(s));
        states.add(state);
      }
    }
    return states;
  }
}
