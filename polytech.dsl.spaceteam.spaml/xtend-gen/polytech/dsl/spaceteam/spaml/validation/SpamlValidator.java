/**
 * generated by Xtext 2.14.0
 */
package polytech.dsl.spaceteam.spaml.validation;

import arduinoML.ArduinoMLPackage;
import arduinoML.PluggedElement;
import arduinoML.Program;
import java.util.HashSet;
import org.eclipse.xtext.validation.Check;
import polytech.dsl.spaceteam.spaml.validation.AbstractSpamlValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class SpamlValidator extends AbstractSpamlValidator {
  public final static String INVALID_PIN = "invalidPin";
  
  @Check
  public void checkPluggedElementPinValid(final PluggedElement pluggedElement) {
    if (((pluggedElement.getPin() < 0) || (pluggedElement.getPin() > 13))) {
      this.error("Pin should be 0 => pin <= 13", 
        ArduinoMLPackage.Literals.PLUGGED_ELEMENT__PIN, 
        0);
      return;
    }
  }
  
  @Check
  public void checkPluggedElementPinNotDouble(final Program program) {
    final HashSet<Integer> pinsUsed = new HashSet<Integer>();
    for (int i = 0; (i < program.getPluggedElements().size()); i++) {
      boolean _contains = pinsUsed.contains(Integer.valueOf(program.getPluggedElements().get(i).getPin()));
      if (_contains) {
        int _pin = program.getPluggedElements().get(i).getPin();
        String _plus = ("Pin " + Integer.valueOf(_pin));
        String _plus_1 = (_plus + " is already used");
        this.error(_plus_1, 
          ArduinoMLPackage.Literals.PROGRAM__PLUGGED_ELEMENTS, i);
      } else {
        pinsUsed.add(Integer.valueOf(program.getPluggedElements().get(i).getPin()));
      }
    }
  }
}
