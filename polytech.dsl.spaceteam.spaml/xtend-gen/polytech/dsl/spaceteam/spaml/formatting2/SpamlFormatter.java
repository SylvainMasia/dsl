/**
 * generated by Xtext 2.14.0
 */
package polytech.dsl.spaceteam.spaml.formatting2;

import arduinoML.Action;
import arduinoML.PluggedElement;
import arduinoML.Program;
import arduinoML.State;
import arduinoML.Transition;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import polytech.dsl.spaceteam.spaml.services.SpamlGrammarAccess;

@SuppressWarnings("all")
public class SpamlFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SpamlGrammarAccess _spamlGrammarAccess;
  
  protected void _format(final Program program, @Extension final IFormattableDocument document) {
    EList<PluggedElement> _pluggedElements = program.getPluggedElements();
    for (final PluggedElement pluggedElement : _pluggedElements) {
      document.<PluggedElement>format(pluggedElement);
    }
    EList<State> _states = program.getStates();
    for (final State state : _states) {
      document.<State>format(state);
    }
  }
  
  protected void _format(final State state, @Extension final IFormattableDocument document) {
    EList<Action> _actions = state.getActions();
    for (final Action action : _actions) {
      document.<Action>format(action);
    }
    document.<Transition>format(state.getTransition());
  }
  
  public void format(final Object program, final IFormattableDocument document) {
    if (program instanceof XtextResource) {
      _format((XtextResource)program, document);
      return;
    } else if (program instanceof Program) {
      _format((Program)program, document);
      return;
    } else if (program instanceof State) {
      _format((State)program, document);
      return;
    } else if (program instanceof EObject) {
      _format((EObject)program, document);
      return;
    } else if (program == null) {
      _format((Void)null, document);
      return;
    } else if (program != null) {
      _format(program, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(program, document).toString());
    }
  }
}
