/*
 * generated by Xtext 2.14.0
 */
package polytech.dsl.spaceteam.spaml.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import polytech.dsl.spaceteam.spaml.ide.contentassist.antlr.internal.InternalSpamlParser;
import polytech.dsl.spaceteam.spaml.services.SpamlGrammarAccess;

public class SpamlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SpamlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SpamlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProgramAccess().getAlternatives_5(), "rule__Program__Alternatives_5");
			builder.put(grammarAccess.getProgramAccess().getAlternatives_7(), "rule__Program__Alternatives_7");
			builder.put(grammarAccess.getPluggedElementAccess().getAlternatives_0(), "rule__PluggedElement__Alternatives_0");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives_1(), "rule__Action__Alternatives_1");
			builder.put(grammarAccess.getTransitionAccess().getAlternatives_0(), "rule__Transition__Alternatives_0");
			builder.put(grammarAccess.getTransitionAccess().getAlternatives_0_0_2_0(), "rule__Transition__Alternatives_0_0_2_0");
			builder.put(grammarAccess.getTransitionAccess().getAlternatives_0_0_3_0(), "rule__Transition__Alternatives_0_0_3_0");
			builder.put(grammarAccess.getTransitionAccess().getAlternatives_1(), "rule__Transition__Alternatives_1");
			builder.put(grammarAccess.getTransitionHandlerAccess().getAlternatives_1(), "rule__TransitionHandler__Alternatives_1");
			builder.put(grammarAccess.getSIGNALAccess().getAlternatives(), "rule__SIGNAL__Alternatives");
			builder.put(grammarAccess.getOPERATIONAccess().getAlternatives(), "rule__OPERATION__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getPluggedElementAccess().getGroup(), "rule__PluggedElement__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup(), "rule__Actuator__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_0_0(), "rule__Transition__Group_0_0__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_0_0_2(), "rule__Transition__Group_0_0_2__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_0_0_3(), "rule__Transition__Group_0_0_3__0");
			builder.put(grammarAccess.getTransitionHandlerAccess().getGroup(), "rule__TransitionHandler__Group__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getInitialStateAssignment_3(), "rule__Program__InitialStateAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getPluggedElementsAssignment_6(), "rule__Program__PluggedElementsAssignment_6");
			builder.put(grammarAccess.getProgramAccess().getStatesAssignment_8(), "rule__Program__StatesAssignment_8");
			builder.put(grammarAccess.getPluggedElementAccess().getNameAssignment_1(), "rule__PluggedElement__NameAssignment_1");
			builder.put(grammarAccess.getPluggedElementAccess().getPinAssignment_3(), "rule__PluggedElement__PinAssignment_3");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_0(), "rule__State__NameAssignment_0");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_2(), "rule__State__ActionsAssignment_2");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_3(), "rule__State__ActionsAssignment_3");
			builder.put(grammarAccess.getStateAccess().getTransitionAssignment_4(), "rule__State__TransitionAssignment_4");
			builder.put(grammarAccess.getActionAccess().getActuatorAssignment_0(), "rule__Action__ActuatorAssignment_0");
			builder.put(grammarAccess.getActionAccess().getValueAssignment_2(), "rule__Action__ValueAssignment_2");
			builder.put(grammarAccess.getTransitionAccess().getHandlersAssignment_0_0_1(), "rule__Transition__HandlersAssignment_0_0_1");
			builder.put(grammarAccess.getTransitionAccess().getHandlersAssignment_0_0_2_1(), "rule__Transition__HandlersAssignment_0_0_2_1");
			builder.put(grammarAccess.getTransitionAccess().getOperationAssignment_0_0_3_1(), "rule__Transition__OperationAssignment_0_0_3_1");
			builder.put(grammarAccess.getTransitionAccess().getDelayAssignment_0_1(), "rule__Transition__DelayAssignment_0_1");
			builder.put(grammarAccess.getTransitionAccess().getNextAssignment_2(), "rule__Transition__NextAssignment_2");
			builder.put(grammarAccess.getTransitionHandlerAccess().getSensorAssignment_0(), "rule__TransitionHandler__SensorAssignment_0");
			builder.put(grammarAccess.getTransitionHandlerAccess().getValueAssignment_2(), "rule__TransitionHandler__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SpamlGrammarAccess grammarAccess;

	@Override
	protected InternalSpamlParser createParser() {
		InternalSpamlParser result = new InternalSpamlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SpamlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SpamlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
